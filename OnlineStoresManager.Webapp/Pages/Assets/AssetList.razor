@page "/assets"
@attribute [Authorize(Roles = Roles.Administrator)]
@inherits HyOPTAwaitableComponent

<PageTitle>@Localizer["Assets"]</PageTitle>

<div class="mb-3">
    <HyOPTGridTopBar @bind-SearchText=@Filter.SearchText
                     @bind-SearchText:after=@RefreshGrid
                     OnCreate=@ShowCreateDialog
                     OnExport=@Export
                     Title=@Title />
</div>

<TelerikGrid @ref=@GridRef
             EditMode=@GridEditMode.Inline
             OnDelete=@ShowDeleteDialog
             OnRead=@ReadAssets
             OnUpdate=@Update
             Pageable=true
             PageSize=@Filter.PageSize
             Reorderable=true
             Resizable=true
             ShowColumnMenu=true
             Sortable=true
             TItem="Asset">
    <GridSettings>
        <GridColumnMenuSettings FilterMode=@ColumnMenuFilterMode.None>
            <GridColumnMenuChooser>
                <Template>
                    @foreach (ColumnMenuChooserColumn column in context.Columns)
                    {
                        <GridColumnMenuChooserItem ColumnId=@column.Id Title=@column.Title />
                    }
                </Template>
            </GridColumnMenuChooser>
        </GridColumnMenuSettings>
    </GridSettings>
    <GridColumns>
        <GridColumn Field=@AssetFieldIdentifier.Name.ToString()
                    EditorType=@GridEditorType.TextArea
                    Id=@AssetFieldIdentifier.Name.ToString()
                    Title=@Localizer["AssetName"]>
            <Template>
                @(((Asset)context).Name)
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.ShortName.ToString()
                    EditorType=@GridEditorType.TextArea
                    Id=@AssetFieldIdentifier.ShortName.ToString()
                    Title=@Localizer["AssetShortName"]>
            <Template>
                @(((Asset)context).ShortName)
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.MeteringPoint.ToString()
                    Editable=false
                    Id=@AssetFieldIdentifier.MeteringPoint.ToString()
                    Title=@Localizer["MeteringPoint"]>
            <Template>
                @(((Asset)context).MeteringPoint)
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.Regulation.ToString()
                    Id=@AssetFieldIdentifier.Regulation.ToString()
                    Title=@Localizer["AssetRegulation"]>
            <Template>
                @{
                    bool? isRegulated = ((Asset)context).Regulation;
                }
                @(isRegulated == true ? Localizer["YesMastrIdRegistered"] : (isRegulated == false ? Localizer["NoMastrIdRegistered"] : string.Empty))
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.Type.ToString()
                    Id=@AssetFieldIdentifier.Type.ToString()
                    Title=@Localizer["AssetType"]>
            <Template>
                @{
                    AssetType? type = ((Asset)context).Type;
                }
                @(type.HasValue ? Localizer[type.Value.ToString()] : string.Empty)
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.MastrNr.ToString()
                    Editable=false
                    Id=@AssetFieldIdentifier.MastrNr.ToString()
                    Title=@Localizer["MastrNr"]>
            <Template>
                @{
                    Asset asset = (Asset)context;
                    if (!string.IsNullOrEmpty(asset?.MastrNr))
                    {
                        <TelerikButton OnClick=@(() => ShowEditMastrAssetDialog(asset.MastrNr)) Enabled=@IsAdministrator>
                            @asset.MastrNr
                        </TelerikButton>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@AssetFieldIdentifier.MastrLoadBrutto.ToString()
                    Id=@AssetFieldIdentifier.MastrLoadBrutto.ToString()
                    Title=@Localizer["LoadBrutto"]
                    Sortable=false>
            <Template>
                @{
                    Asset asset = (Asset)context;
                    MastrAsset? mastrAsset = MastrAssets?.FirstOrDefault(a => a.Id == asset.MastrNr);
                }
                @(mastrAsset?.Bruttoleistung != null ? Math.Round(mastrAsset.Bruttoleistung.Value, 2, MidpointRounding.AwayFromZero) : string.Empty)
            </Template>
        </GridColumn>
        <GridCommandColumn Width="250px">
            <GridCommandButton OnClick=@(e => ShowEditDialog((Asset)e.Item)) Icon=@SvgIcon.Window>@Localizer["Open"]</GridCommandButton>
            <GridCommandButton Command="Save" Icon=@SvgIcon.Save ShowInEdit=true>@Localizer["Save"]</GridCommandButton>
            <GridCommandButton Command="Edit" Icon=@SvgIcon.Pencil>@Localizer["Edit"]</GridCommandButton>
            <GridCommandButton Command="Delete" Icon=@SvgIcon.Trash ThemeColor="error">@Localizer["Delete"]</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon=@SvgIcon.Cancel ShowInEdit=true>@Localizer["Cancel"]</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>
