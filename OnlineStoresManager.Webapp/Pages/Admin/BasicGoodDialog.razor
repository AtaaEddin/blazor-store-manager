@inherits OSMAwaitableComponent

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Class="d-inline-block">
            <MudText>
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
                @if (BasicGood?.Gategory != null)
                {
                    <span>@(IsNew ? @Localizer["New"] : Localizer["Edit"]) @Localizer[$"{BasicGood!.Type!.Value.ToString()}"] "@BasicGood!.Name"</span>
                }
            </MudText>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
            <MudForm @ref=MudFormRef Model=@BasicGood Validation=GoodValidation?.ValidateValue ValidationDelay="0">
                <MudGrid Spacing="5" Justify="Justify.Center">
                    <MudItem xs="12" sm="6">
                        <MudText Typo=Typo.h6>
                            @Localizer["GeneralInfo"]
                        </MudText>
                        <MudDivider Class="mb-5" DividerType="DividerType.FullWidth" />
                        <MudSelect T=string
                                   Class="mb-2"
                                   Disabled=true
                                   Value=@BasicGood!.Gategory.ToString()
                                   Label=@Localizer["Gategory"]
                                   Margin="Margin.Dense"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.TopLeft">

                            @foreach (var gategory in Enum.GetNames<GoodGategory>())
                            {
                                <MudSelectItem Value=gategory />
                            }
                        </MudSelect>
                        <MudSelect T=string
                                    Class="mb-2 mt-1"
                                    Value=@BasicGood.Type.ToString()
                                    ValueChanged=TypeChanged
                                    Disabled=!IsNew
                                    Label=@Localizer["Type"]
                                    Margin="Margin.Dense" 
                                    Variant="Variant.Outlined"
                                    AnchorOrigin="Origin.CenterCenter">

                            @foreach (var type in Enum.GetNames<GoodType>())
                            {
                                <MudSelectItem Value=type />
                            }
                        </MudSelect>
                        <MudTextField @bind-Value=BasicGood!.Name
                                      For=@(() => BasicGood!.Name)
                                      Immediate="true"
                                      Label="@Localizer["Name"]" />
                        <MudNumericField @bind-Value=BasicGood!.Price
                                         For=@(() => BasicGood!.Price)
                                         Immediate="true"
                                         Label="@Localizer["Price"]" />

                        <MudTextField T="string" @bind-Value=BasicGood!.Description Label=@Localizer["Description"] Variant="Variant.Filled" Lines="3" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText Typo=Typo.h6>
                            @Localizer["TypeSpecificInfo"]
                        </MudText>
                        <MudDivider Class="mb-5" DividerType="DividerType.FullWidth" />
                       @switch(BasicGood.Type)
                        {
                            case GoodType.ShortStory:
                                <MudTextField @bind-Value=@(((ShortStory)BasicGood!).Author)
                                              For=@(() => BasicGood!.Name)
                                              Immediate="true"
                                              Label="@Localizer["Author"]" />
                                break;

                            case GoodType.Shirt:
                                <MudTextField @bind-Value=@(((Shirt)BasicGood!).Color)
                                              For=@(() => BasicGood!.Name)
                                              Immediate="true"
                                              Label="@Localizer["Color"]" />
                                <MudSelect T=ShirtType?
                                           Class="my-2"
                                           @bind-Value=(((Shirt)BasicGood!).ShirtType)
                                           Label=@Localizer["ShirtType"]
                                           Margin="Margin.Dense"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.CenterCenter">

                                    @foreach (var shirtType in Enum.GetValues<ShirtType>())
                                    {
                                        <MudSelectItem T=ShirtType? Value=shirtType >
                                            @shirtType.ToString()
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                                    break;

                            default: throw new ArgumentException($"Unsupported good gategory. {BasicGood.Type.ToString()}");
                        }
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=Close>@Localizer["Cancel"]</MudButton>
        <MudButton Color=@Color.Success Variant="Variant.Filled" OnClick=Save>@Localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>